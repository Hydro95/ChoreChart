namespace net.sudormrf.chorechart;

/*
every time you recompile you must:

manually add imports in android studio
@Exclude the getters for complex objects

*/

class User {
	String name;
	int points = 0;
	int icon = 0;
	String id = Facade.getInstance().getUserRef().push().getKey();


	//void allocateTask(Task task) {
	//	allocations.add(new Allocation(task, this));
	//}
}

class Parent {
	isA User;
	void createNewAccount(String name) {

	}
}

class Task {

	public enum Repeat {NEVER, DAILY, WEEKLY, MONTHY, YEARLY}

	String name;
	String deadline;
	String duration = "Unknown";
	String comment = "";
	boolean completed = false;
	Repeat frequency = Repeat.NEVER;

	String id = Facade.getInstance().getTaskRef().push().getKey();

	User getUser() {
		return allocation.getUser();
	}

	status {
		Unallocated {
			setAllocation -> InProgress; //this should check if setAllocation returns true
			deadlinePassed -> Failed;
		}
		InProgress {
			markCompleted -> Completed;
			release -> Unallocated;
			deadlinePassed -> Failed;
		}
		Completed {}
		Failed { extendDeadline -> Unallocated; }
	}

}

class Allocation {

	String id = Facade.getInstance().getDatabase().getReference("allocations").push().getKey();

	void markCompleted() {}

	0..1 -- 1 Task;
	* -- 1 User;
}


class Tools {
	String name;

	* -- * Task;
}

class ShoppingList {
	String location; // example hardware or grocery store
	String[] items;

	String id = Facade.getInstance().getShoppingRef().push().getKey();

	void add(String item) {}
	void delete(int index) {}
	//void createList(String name, Home home, String[] items) {}

	//1 -- 0..1 Task;
}

class Home {
	String name;

	//1 -- 1..* Parent;
	1 -- * User;
}

class Facade {
	singleton;

	FirebaseDatabase database = FirebaseDatabase.getInstance();
	DatabaseReference userRef = database.getReference("users");
	DatabaseReference shoppingRef = database.getReference("shopping");
	DatabaseReference taskRef = database.getReference("tasks");

	// Listeners
	void createListeners() {
		userRef.addValueEventListener(new ValueEventListener() {
			@Override
			public void onDataChange(DataSnapshot dataSnapshot) {
				users.clear();

				for (DataSnapshot userSnapshot : dataSnapshot.getChildren()) {
				    String name = (String) userSnapshot.child("name").getValue();
						int icon = (Long.valueOf((long)userSnapshot.child("icon").getValue()).intValue() != 0) ? Long.valueOf((long)userSnapshot.child("icon").getValue()).intValue() : R.drawable.ic_logo_mil;
						int points = (Long.valueOf((long)userSnapshot.child("points").getValue()).intValue() != 0) ? Long.valueOf((long)userSnapshot.child("points").getValue()).intValue() : 0;
                    String id = userSnapshot.getKey();

                    Home home = Facade.getInstance().getCurrentHome();

					User user = new User(name, home, Facade.getInstance());

					user.setIcon(icon);
					user.setPoints(points);
					user.setId(id);

					users.add(user);
				}
			}

			@Override
			public void onCancelled(DatabaseError error) {
					//don't worry this will definitely never fail (nope)
			}
		});

		shoppingRef.addValueEventListener(new ValueEventListener() {
			@Override
			public void onDataChange(DataSnapshot dataSnapshot) {
				shoppingLists.clear();

				for (DataSnapshot shoppingListSnapshot : dataSnapshot.getChildren()) {
					ShoppingList list = shoppingListSnapshot.getValue(ShoppingList.class);
					shoppingLists.add(list);
				}
			}

			@Override
			public void onCancelled(DatabaseError error) {
					//don't worry this will probably never ever fail (never ever)
			}
		});

		taskRef.addValueEventListener(new ValueEventListener() {
			@Override
			public void onDataChange(DataSnapshot dataSnapshot) {
				tasks.clear();

				for (DataSnapshot taskSnapshot : dataSnapshot.getChildren()) {
					Task task = taskSnapshot.getValue(Task.class);
					tasks.add(task);
				}
			}

			@Override
			public void onCancelled(DatabaseError error) {
					//don't worry this will never fail (not even once)
			}
		});
	}


	void publishUsers() {
		for (User user : users) {
			DatabaseReference ref = this.getUserRef().child(user.getId());

			ref.child("name").setValue(user.getName());
			ref.child("icon").setValue(user.getIcon());
			ref.child("points").setValue(user.getPoints());

			DatabaseReference allocRef = ref.child("allocations");
			for (Allocation alloc : user.getAllocations()) {
				allocRef.child(alloc.getId()).setValue(alloc.getId());
			}



		}
	}

	void publishTasks() {
		for (Task task : tasks) {
			this.getTaskRef().child(task.getId()).setValue(task);
		}
	}

	void publishShoppingLists() {
		for (ShoppingList list : shoppingLists) {
			this.getShoppingRef().child(list.getId()).setValue(list);
		}
	}

	//END OF DATABASE ZONE//

	String getAllocationId(Allocation alloc) {
		return alloc.getId();
	}

	Home currentHome = new Home("Test Home");
	User currentUser = null;

	void createNewAccount(String name) {
		currentHome.addUser(name, this);
	}

	void allocateTask(User user, Task task) {
		new Allocation(task, user);
	}

	boolean markCompleted(Task task) {
		if(currentUser == task.getUser())
			return task.markCompleted();  // Not sure how to respond if task is not InProgress
		return false;
	}

	void addToShopping(ShoppingList list, String item) {
		list.add(item);
	}


//Figure out if you can deel with this (automatically using currentX)
	User addUser(String aName, int icon) {
		User user = new User(aName, currentHome, this);
		user.setIcon(icon);
		return user;
	}

	1 -- * User;
	1 -- * Task;
	1 -- * Tools;
	1 -- * ShoppingList;
}
