namespace net.sudormrf.chorechart;

/*
every time you recompile you must:

add @Exclude above User.getFacade(), Task.getFacade(), ShoppingList.getFacade()
Remove the umple gen'd getter for User.getTaskIds()

*/

class User {
	String name;
	int points = 0;
	String icon = "";
	String id = Facade.getInstance().getUserRef().push().getKey();
	String[] taskIds;

	//default constructor for db
	public User() {}

	public List<String> getTaskIds() {
    return taskIds;
  }

	//void allocateTask(Task task) {
	//	allocations.add(new Allocation(task, this));
	//}
}

class Parent {
	isA User;
	void createNewAccount(String name) {

	}
}

class Task {

	public enum Repeat {NEVER, DAILY, WEEKLY, MONTHY, YEARLY}

	String name = "";
	String deadline = "";
	String duration = "Unknown";
	String comment = "";
	boolean completed = false;
	Repeat frequency = Repeat.NEVER;

	String id = Facade.getInstance().getTaskRef().push().getKey();
	String userId = "";

	//default constructor for db
	public Task() {}

	public User getUser() {
		return Facade.getInstance().getUser(userId);
	}

	public boolean hasAllocation() {
		return userId != null;
	}

	status {
		Unallocated {
			setUserId -> InProgress; //this should check if setUser returns true
			deadlinePassed -> Failed;
		}
		InProgress {
			markCompleted -> Completed;
			release -> Unallocated;
			deadlinePassed -> Failed;
		}
		Completed {}
		Failed { extendDeadline -> Unallocated; }
	}

}


class Tools {
	String name;

	* -- * Task;
}

class ShoppingList {
	String name; // list name
	String location; // example hardware or grocery store
	String[] items;
	int icon;

	String id = Facade.getInstance().getShoppingRef().push().getKey();

	void add(String item) {}
	void delete(int index) {}
	//void createList(String name, Home home, String[] items) {}

	//1 -- 0..1 Task;
}

class Home {
	String name;
	String[] userIds;

	//1 -- 1..* Parent;
}

class Facade {
	singleton;

	FirebaseDatabase database = FirebaseDatabase.getInstance();
	DatabaseReference userRef = database.getReference("users");
	DatabaseReference shoppingRef = database.getReference("shopping");
	DatabaseReference taskRef = database.getReference("tasks");

	// Listeners
	void createListeners() {
		userRef.addValueEventListener(new ValueEventListener() {
			@Override
			public void onDataChange(DataSnapshot dataSnapshot) {
				users.clear();

				for (DataSnapshot userSnapshot : dataSnapshot.getChildren()) {
						User user = userSnapshot.getValue(User.class);
						Facade.getInstance().addUser(user);
				}
			}

			@Override
			public void onCancelled(DatabaseError error) {
					//don't worry this will definitely never fail (nope)
			}
		});

		shoppingRef.addValueEventListener(new ValueEventListener() {
			@Override
			public void onDataChange(DataSnapshot dataSnapshot) {
				shoppingLists.clear();

				for (DataSnapshot shoppingListSnapshot : dataSnapshot.getChildren()) {
					ShoppingList list = shoppingListSnapshot.getValue(ShoppingList.class);
					Facade.getInstance().addShoppingList(list);
				}
			}

			@Override
			public void onCancelled(DatabaseError error) {
					//don't worry this will probably never ever fail (never ever)
			}
		});

		taskRef.addValueEventListener(new ValueEventListener() {
			@Override
			public void onDataChange(DataSnapshot dataSnapshot) {
				tasks.clear();

				for (DataSnapshot taskSnapshot : dataSnapshot.getChildren()) {
					Task task = taskSnapshot.getValue(Task.class);
					Facade.getInstance().addTask(task);
				}

			}

			@Override
			public void onCancelled(DatabaseError error) {
					//don't worry this will never fail (not even once)
			}
		});
	}

	void publishUsers() {
		for (User user : users) {
			this.getUserRef().child(user.getId()).setValue(user);
		}
	}

	void publishTasks() {
		for (Task task : tasks) {
			this.getTaskRef().child(task.getId()).setValue(task);
		}
	}

	void publishShoppingLists() {
		for (ShoppingList list : shoppingLists) {
			this.getShoppingRef().child(list.getId()).setValue(list);
		}
	}

	User getUser(String id){
    for (User user : users) {
      if (user.getId() == id) {
        return user;
      }
    }
    return null;
  }

	Task getTask(String id){
    for (Task task : tasks) {
      if (task.getId() == id) {
        return task;
      }
    }
    return null;
  }

	//END OF DATABASE ZONE//

	Home currentHome = new Home("Test Home");
	User currentUser = null;

	void allocateTask(User user, Task task) {
		task.setUserId(user.getId());
		user.addTaskId(task.getId());
	}

	boolean markCompleted(Task task) {
		if(currentUser.getId() == task.getUserId())
			return task.markCompleted();  // Not sure how to respond if task is not InProgress
		return false;
	}

	void addToShopping(ShoppingList list, String item) {
		list.add(item);
	}

	1 -- * User;
	1 -- * Task;
	1 -- * Tools;
	1 -- * ShoppingList;
}
