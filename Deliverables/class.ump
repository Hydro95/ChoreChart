class User {
	String name;
	int points = 0;
	int icon = 0;

	void allocateTask(Task task) {
		allocations.add(new Allocation(task, this));
	} 
}

class Parent {
	isA User;
	void createNewAccount(String name) {

	}
}

class Task {

	public enum Repeat {NEVER, DAILY, WEEKLY, MONTHY, YEARLY}

	String name;
	Date deadline;
	String duration;
	String comment;
	boolean completed = false;
	Repeat frequency = Repeat.NEVER;

	User getUser() {
		return allocation.getUser();
	}

	status {
		Unallocated {
			setAllocation -> InProgress; //this should check if setAllocation returns true
			deadlinePassed -> Failed;
		}
		InProgress {
			markCompleted -> Completed;
			release -> Unallocated;
			deadlinePassed -> Failed;
		}
		Completed {}
		Failed { extendDeadline -> Unallocated; }
	}

}

class Allocation {

	void markCompleted() {}

	0..1 -- 1 Task;
	* -- 1 User;
}


class Tools {
	String name;

	* -- * Task;
}

class ShoppingList {
	String location; // example hardware or grocery store
	String[] items;

	void add(String item) {}
	void delete(int index) {}
	//void createList(String name, Home home, String[] items) {}

	1 -- 0..1 Task;
}

class Home {
	String name;

	//1 -- 1..* Parent;
	1 -- * User;
}

class Facade {

	Home currentHome = null;
	User currentUser = null;

	void createNewAccount(String name) {
		currentHome.addUser(name, this);
	}

	void allocateTask(User user, Task task) {
		new Allocation(task, user);
	}

	boolean markCompleted(Task task) {
		if(currentUser == task.getUser())
			return task.markCompleted();  // Not sure how to respond if task is not InProgress
		return false;
	}

	void addToShopping(ShoppingList list, String item) {
		list.add(item);
	}

	//void promptConfirmAction(String message) {} //WTF is this?
	//void modifyTask(Task task) {}

	1 -- * User;
	1 -- * Task;
	1 -- * Tools;
	1 -- * ShoppingList;
}